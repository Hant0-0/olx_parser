
services:
  backend:
    container_name: "backend"
    working_dir: /app/django_app/
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      - "8000:8000"
    volumes:
      - ../django_app:/app/django_app/
    depends_on:
      - db
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"

  db:
    image: postgres:14
    volumes:
      - pg_data:/var/lib/postgresql/data/
      - dumps:/dumps/
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}


  olx_parser:
    container_name: "olx_parser"
    working_dir: /app/django_app/
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
    volumes:
      - ../django_app:/app/django_app/
    command: > 
      sh -c "xvfb-run python3 manage.py olx_parser"
      

  backup_service:
    image: postgres:latest
    container_name: "backup_service"
    working_dir: /app/docker
    build:
      dockerfile: ./Dockerfile.backup_service
    volumes:
      - ../dumps:/app/dumps/
      - ./backup.sh:/app/backup.sh
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    command: cron -f


volumes:
  pg_data:
  dumps: